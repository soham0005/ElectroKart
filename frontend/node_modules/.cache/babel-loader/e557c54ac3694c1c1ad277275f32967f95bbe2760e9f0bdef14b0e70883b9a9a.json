{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","map":{"version":3,"names":["classNames","React","useMemo","createWithBsPrefix","useBootstrapPrefix","FormCheckInput","InputGroupContext","jsx","_jsx","InputGroupText","Component","InputGroupCheckbox","props","children","type","InputGroupRadio","InputGroup","forwardRef","bsPrefix","size","hasValidation","className","as","ref","contextValue","Provider","value","displayName","Object","assign","Text","Radio","Checkbox"],"sources":["/home/abhi/ElectroKart/frontend/node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,cAAc,GAAGN,kBAAkB,CAAC,kBAAkB,EAAE;EAC5DO,SAAS,EAAE;AACb,CAAC,CAAC;AACF,MAAMC,kBAAkB,GAAGC,KAAK,IAAI,aAAaJ,IAAI,CAACC,cAAc,EAAE;EACpEI,QAAQ,EAAE,aAAaL,IAAI,CAACH,cAAc,EAAE;IAC1CS,IAAI,EAAE,UAAU;IAChB,GAAGF;EACL,CAAC;AACH,CAAC,CAAC;AACF,MAAMG,eAAe,GAAGH,KAAK,IAAI,aAAaJ,IAAI,CAACC,cAAc,EAAE;EACjEI,QAAQ,EAAE,aAAaL,IAAI,CAACH,cAAc,EAAE;IAC1CS,IAAI,EAAE,OAAO;IACb,GAAGF;EACL,CAAC;AACH,CAAC,CAAC;AACF,MAAMI,UAAU,GAAG,aAAaf,KAAK,CAACgB,UAAU,CAAC,CAAC;EAChDC,QAAQ;EACRC,IAAI;EACJC,aAAa;EACbC,SAAS;EACT;EACAC,EAAE,EAAEZ,SAAS,GAAG,KAAK;EACrB,GAAGE;AACL,CAAC,EAAEW,GAAG,KAAK;EACTL,QAAQ,GAAGd,kBAAkB,CAACc,QAAQ,EAAE,aAAa,CAAC;;EAEtD;EACA;EACA,MAAMM,YAAY,GAAGtB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAC5C,OAAO,aAAaM,IAAI,CAACF,iBAAiB,CAACmB,QAAQ,EAAE;IACnDC,KAAK,EAAEF,YAAY;IACnBX,QAAQ,EAAE,aAAaL,IAAI,CAACE,SAAS,EAAE;MACrCa,GAAG,EAAEA,GAAG;MACR,GAAGX,KAAK;MACRS,SAAS,EAAErB,UAAU,CAACqB,SAAS,EAAEH,QAAQ,EAAEC,IAAI,IAAK,GAAED,QAAS,IAAGC,IAAK,EAAC,EAAEC,aAAa,IAAI,gBAAgB;IAC7G,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;AACFJ,UAAU,CAACW,WAAW,GAAG,YAAY;AACrC,eAAeC,MAAM,CAACC,MAAM,CAACb,UAAU,EAAE;EACvCc,IAAI,EAAErB,cAAc;EACpBsB,KAAK,EAAEhB,eAAe;EACtBiB,QAAQ,EAAErB;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}